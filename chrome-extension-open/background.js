(()=>{"use strict";var e,t,s;!function(e){e.DEEPSEEK="deepseek",e.KIMI="kimi",e.DOUBAO="doubao",e.UNKNOWN="unknown"}(e||(e={})),function(e){e.NORMAL="normal",e.LOADING="loading",e.SUCCESS="success",e.ERROR="error"}(t||(t={})),function(e){e.NETWORK_ERROR="network_error",e.API_ERROR="api_error",e.CONFIG_ERROR="config_error",e.UNKNOWN_ERROR="unknown_error"}(s||(s={})),Error;class n{constructor(e){this.config=e}async retrieve(e,t=3){try{this.validateConfig();const s=`${this.config.postUrl}/datasets/${this.config.datasetId}/retrieve`,n={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},r={query:e,retrieval_model:{search_method:"semantic_search",reranking_enable:!1,top_k:t,score_threshold_enabled:!1}};console.log("发送知识库检索请求:",{url:s,query:e,topK:t});const o=new AbortController,a=setTimeout(()=>{o.abort()},3e4),i=await fetch(s,{method:"POST",headers:n,body:JSON.stringify(r),signal:o.signal});if(clearTimeout(a),!i.ok){const e=await i.json().catch(()=>({}));throw new Error(`知识库检索失败: ${i.status} ${i.statusText}. ${e.message||""}`)}const c=await i.json();return console.log("知识库检索响应:",c),{success:!0,data:c}}catch(e){return console.error("知识库检索错误:",e),{success:!1,error:e.message}}}async testConnection(){try{this.validateConfig(),console.log("发送知识库测试请求:",{url:`${this.config.postUrl}/datasets/${this.config.datasetId}/retrieve`,datasetId:this.config.datasetId});const e=await this.retrieve("测试连接",1);if(e.success)return console.log("知识库连接测试成功"),{success:!0};throw new Error(e.error||"连接测试失败")}catch(e){console.error("知识库连接测试失败:",e);let t="未知错误";return e instanceof Error&&(t=e.message.includes("fetch")?"网络连接失败，请检查网络连接和API地址":e.message),{success:!1,error:t}}}extractMethodologyContent(e){return e.records&&0!==e.records.length?e.records.sort((e,t)=>t.score-e.score).slice(0,3).map((e,t)=>{var s;return`【相关方法论 ${t+1}】\n${e.segment.content}\n关键词: ${(null===(s=e.segment.keywords)||void 0===s?void 0:s.join(", "))||""}`}).join("\n\n"):""}assessRetrievalQuality(e){if(!e.records||0===e.records.length)return{quality:"low",reason:"未找到相关方法论",confidence:0};const t=Math.max(...e.records.map(e=>e.score)),s=e.records.reduce((e,t)=>e+t.score,0)/e.records.length;return t>.8&&s>.6?{quality:"high",reason:"找到高度相关的方法论",confidence:t}:t>.5&&s>.3?{quality:"medium",reason:"找到中等相关的方法论",confidence:t}:{quality:"low",reason:"相关性较低",confidence:t}}optimizeQuery(e){let t=e.replace(/[！!？?。.，,；;：:\"\"''（）()【】\\[\\]]/g," ").replace(/\\s+/g," ").trim();const s=this.extractKeywords(t);return t.length>100&&s.length>0&&(t=s.slice(0,5).join(" ")),!["方法","策略","技巧","流程","步骤"].some(e=>t.includes(e))&&t.length<50&&(t+=" 方法论"),t}extractKeywords(e){const t=new Set(["的","了","在","是","我","有","和","就","不","人","都","一","个","上","也","很","到","说","要","去","你","会","着","没有","看","好","自己","这","那","它","他","她"]),s=e.replace(/[^\\u4e00-\\u9fffA-Za-z0-9\\s]/g,"").split(/\\s+/).filter(e=>e.length>1&&!t.has(e)),n=new Map;return s.forEach(e=>{n.set(e,(n.get(e)||0)+1)}),Array.from(n.entries()).sort((e,t)=>t[1]-e[1]).map(([e])=>e).slice(0,10)}validateConfig(){if(!this.config.apiKey)throw new Error("知识库API密钥未配置");if(!this.config.postUrl)throw new Error("知识库API地址未配置");if(!this.config.datasetId)throw new Error("数据集ID未配置")}updateConfig(e){this.config={...e}}getConfig(){return{...this.config}}async batchRetrieve(e,t=3){try{return{success:!0,results:await Promise.all(e.map(async e=>({query:e,...await this.retrieve(e,t)})))}}catch(e){return{success:!1,error:e.message}}}async getStats(){return{success:!0,stats:{totalDocuments:1,totalSegments:0,lastUpdated:(new Date).toISOString()}}}}class r{constructor(e){this.config=e}async enhance(e,t=""){try{this.validateConfig();const s=this.getSystemPrompt(),n=this.buildUserPrompt(e,t);return console.log("发送AI增强请求:",{userInput:e,hasMethodology:!!t}),{success:!0,enhancedText:(await this.callLLMAPI(s,n)).trim()}}catch(e){return console.error("AI增强失败:",e),{success:!1,error:e.message}}}async testConnection(){var e;try{this.validateConfig();const t={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},s={model:this.config.modelName,messages:[{role:"user",content:"测试连接"}],max_tokens:10};console.log("发送大模型测试请求:",{url:`${this.config.baseUrl}/chat/completions`,model:this.config.modelName});const n=new AbortController,r=setTimeout(()=>{n.abort()},3e4),o=await fetch(`${this.config.baseUrl}/chat/completions`,{method:"POST",headers:t,body:JSON.stringify(s),signal:n.signal});if(clearTimeout(r),console.log("大模型API响应状态:",o.status),!o.ok){let t=`HTTP ${o.status}: ${o.statusText}`;try{const s=await o.json();(null===(e=s.error)||void 0===e?void 0:e.message)?t=s.error.message:s.message&&(t=s.message)}catch(e){console.warn("无法解析错误响应:",e)}throw new Error(`连接失败: ${t}`)}const a=await o.json();if(console.log("大模型API响应数据:",a),!a.choices||!a.choices[0])throw new Error("API响应格式异常: 缺少choices字段");return console.log("大模型连接测试成功"),{success:!0}}catch(e){console.error("大模型连接测试失败:",e);let t="未知错误";return e instanceof Error&&(t="AbortError"===e.name?"请求超时，请检查网络连接或API地址":e.message.includes("fetch")?"网络连接失败，请检查网络连接和API地址":e.message),{success:!1,error:t}}}getSystemPrompt(){return'扮演一名提示词工程师，根据我接下来为你提供的需求、相关方法论和示例，创建一个可以满足需求的提示词。\n\n## 创作方法\n1. 分析需求：理解或挖掘需求的背景和目标，尽可能详细的提供在提示词中，但不要意向编造需求中未描述的信息；\n2. 方法论挑选：我会为你提供 0-3个与用户需求相关的方法论，你可以选择其中 1 个或整合多个，放在提示词中。如果接下来的信息中不包含方法论，可以省略。\n3. 我为你提供的信息中可能会包含参考示例，从中选择与需求的输出相关的示例，放在提示词中。如果未提供示例，则省略这部分。\n\n## 提示词框架\n在创建提示词时，参考以下框架：\n\n# 扮演角色：\n为 AI 定义角色，让它由通用的"助理"，变成更擅长处理具体工作的定向角色，可以使用职业来描述定义。\n\n## 做什么：\n向 AI 尽可能详细的描述任务的背景信息，可以调用它更多的"知识记忆"。\n\n## 怎么做：\n把你完成这项任务的成熟方法论告诉AI，可以确保 AI 按照预期的方法完成任务，几个tips：\n1）如果能给出完成任务的步骤，并要求 AI 输出过程指标，效果会非常棒；\n2）可以使用现成的方法论或者理论知识框架，即便你并不能熟练的应用它；\n3）如果你不知道这项工作的方法，可以先向 AI 询问，从它推荐的方法中选择你觉得靠谱的。\n\n## 参考示例：\n"怎么做"和"结果要求"中你可能列不出全面的信息，让 AI 自己在示例中学习。保留示例前后的代码块分隔符。\n\n## 结果要求：\n为 AI 列出输出的要求，包括格式、结构等。\n另一个重要的提示：为了防止 AI 胡编乱造，有些时候可以在要求为 AI 留出路，类似"如果你无法执行这个任务，可以回复XXX"。\n\n## 输出要求\n直接输出优化后的提示词，不要包含任何解释或说明。确保提示词清晰、具体、可执行。'}buildUserPrompt(e,t){let s=`用户需求：\n<user_query>\n${e}\n</user_query>`;return t&&t.trim()&&(s+=`\n\n可选方法论支持\n<methodology>\n${t}\n</methodology>`),s}async callLLMAPI(e,t){var s;const n={"Content-Type":"application/json",Authorization:`Bearer ${this.config.apiKey}`},r={model:this.config.modelName,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:.7,max_tokens:2e3};try{const e=await fetch(`${this.config.baseUrl}/chat/completions`,{method:"POST",headers:n,body:JSON.stringify(r)});if(!e.ok){const t=await e.json().catch(()=>({}));throw new Error(`API请求失败: ${e.status} ${e.statusText}. ${(null===(s=t.error)||void 0===s?void 0:s.message)||""}`)}const t=await e.json();if(!t.choices||!t.choices[0]||!t.choices[0].message)throw new Error("API响应格式异常");return t.choices[0].message.content}catch(e){if(e instanceof TypeError&&e.message.includes("fetch"))throw new Error("网络连接失败，请检查网络连接和API地址");throw e}}validateConfig(){if(!this.config.apiKey)throw new Error("API密钥未配置");if(!this.config.baseUrl)throw new Error("API基础URL未配置");if(!this.config.modelName)throw new Error("模型名称未配置")}updateConfig(e){this.config={...e}}getConfig(){return{...this.config}}estimateTokens(e){const t=(e.match(/[\\u4e00-\\u9fff]/g)||[]).length,s=(e.match(/[a-zA-Z]+/g)||[]).length,n=e.length-t;return Math.ceil(1.5*t+1.3*s+.5*n)}validateInputLength(e,t=""){const s=`${e} ${t}`,n=this.estimateTokens(s);return n>3e3?{isValid:!1,reason:`输入内容过长（约${n}个token），建议不超过3000个token`,estimatedTokens:n}:{isValid:!0,estimatedTokens:n}}preprocessUserInput(e){return e.trim().replace(/\\s+/g," ").replace(/[\\r\n]+/g,"\n").substring(0,1e3)}postprocessResponse(e){return e.trim().replace(/^```[\\w]*\n?/,"").replace(/\n?```$/,"").replace(/^(提示词：|优化后的提示词：|增强后的提示词：)\\s*/i,"").trim()}async batchEnhance(e){return await Promise.all(e.map(async({userInput:e,methodologyContext:t=""})=>{try{const s=await this.enhance(e,t);return{original:e,enhanced:s.success?s.enhancedText:void 0,error:s.success?void 0:s.error}}catch(t){return{original:e,error:t.message}}}))}getUsageStats(){return{totalRequests:0,successRate:0,averageResponseTime:0}}}const o={llmConfig:{modelName:"",baseUrl:"",apiKey:""},knowledgeBaseConfig:{postUrl:"",datasetId:"",apiKey:""},enabledSites:[e.DEEPSEEK,e.KIMI,e.DOUBAO],enhanceButtonText:"P增强"};new class{constructor(){this.settings=o,this.knowledgeBaseService=new n(this.settings.knowledgeBaseConfig),this.aiEnhanceService=new r(this.settings.llmConfig),this.init()}async init(){await this.loadSettings(),chrome.runtime.onMessage.addListener(this.handleMessage.bind(this)),chrome.runtime.onInstalled.addListener(this.handleInstall.bind(this)),console.log("提示词增强器后台服务已启动")}async loadSettings(){try{const e=await chrome.storage.sync.get(["settings"]);e.settings&&(this.settings={...o,...e.settings},this.updateServices())}catch(e){console.error("加载设置失败:",e)}}async saveSettings(){try{await chrome.storage.sync.set({settings:this.settings})}catch(e){console.error("保存设置失败:",e)}}updateServices(){this.knowledgeBaseService.updateConfig(this.settings.knowledgeBaseConfig),this.aiEnhanceService.updateConfig(this.settings.llmConfig)}handleMessage(e,t,s){try{switch(e.type){case"ENHANCE_REQUEST":return this.handleEnhanceRequest(e,s),!0;case"GET_SETTINGS":s({success:!0,data:this.settings});break;case"UPDATE_SETTINGS":return this.handleUpdateSettings(e.data,s),!0;case"TEST_LLM_CONNECTION":return this.handleTestLLMConnection(e.data,s),!0;case"TEST_KB_CONNECTION":return this.handleTestKBConnection(e.data,s),!0;default:s({success:!1,error:"未知消息类型"})}}catch(e){console.error("处理消息时发生错误:",e),s({success:!1,error:e.message})}}async handleEnhanceRequest(e,t){try{const{userInput:s,siteType:n}=e.data;console.log("开始检索知识库...");const r=await this.knowledgeBaseService.retrieve(s);let o="";r.success&&r.data&&(o=r.data.records.map(e=>e.segment.content).join("\n\n")),console.log("开始AI增强...");t({type:"ENHANCE_RESPONSE",data:await this.aiEnhanceService.enhance(s,o)})}catch(e){console.error("增强请求处理失败:",e),t({type:"ENHANCE_RESPONSE",data:{success:!1,error:e.message}})}}async handleUpdateSettings(e,t){try{this.settings={...this.settings,...e},await this.saveSettings(),this.updateServices(),t({success:!0,data:this.settings})}catch(e){t({success:!1,error:e.message})}}async handleTestLLMConnection(e,t){try{const s=e||this.settings.llmConfig;if(!s.apiKey||!s.baseUrl||!s.modelName)return void t({success:!1,error:"大模型配置不完整，请检查API Key、Base URL和模型名称"});const n=new r(s);t(await n.testConnection())}catch(e){t({success:!1,error:e.message})}}async handleTestKBConnection(e,t){try{const s=e||this.settings.knowledgeBaseConfig;if(!s.apiKey||!s.postUrl||!s.datasetId)return void t({success:!1,error:"知识库配置不完整，请检查API Key、Post URL和Dataset ID"});const r=new n(s);t(await r.testConnection())}catch(e){t({success:!1,error:e.message})}}handleInstall(e){"install"===e.reason&&chrome.runtime.openOptionsPage()}getSettings(){return{...this.settings}}async updateSettings(e){this.settings={...this.settings,...e},await this.saveSettings(),this.updateServices()}}})();