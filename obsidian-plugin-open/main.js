/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MethodologyExtractorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/ui/MethodologyExtractorView.ts
var import_obsidian2 = require("obsidian");

// src/services/DocumentReader.ts
var DocumentReader = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * 获取当前活动文档的信息
   * @returns 文档信息或null（如果没有活动文档）
   */
  async getCurrentDocument() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      throw new Error("\u6CA1\u6709\u6253\u5F00\u7684\u6587\u6863\uFF0C\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A\u6587\u6863");
    }
    return await this.getDocumentInfo(activeFile);
  }
  /**
   * 获取指定文件的文档信息
   * @param file 目标文件
   * @returns 文档信息
   */
  async getDocumentInfo(file) {
    if (!file) {
      throw new Error("\u6587\u4EF6\u4E0D\u5B58\u5728");
    }
    if (file.extension !== "md") {
      throw new Error("\u53EA\u652F\u6301Markdown\u6587\u4EF6\uFF0C\u8BF7\u9009\u62E9.md\u6587\u4EF6");
    }
    try {
      const content = await this.app.vault.read(file);
      if (!content || content.trim().length === 0) {
        throw new Error("\u6587\u6863\u5185\u5BB9\u4E3A\u7A7A\uFF0C\u8BF7\u6DFB\u52A0\u5185\u5BB9\u540E\u91CD\u8BD5");
      }
      const title = file.basename;
      return {
        title,
        content: content.trim(),
        filePath: file.path
      };
    } catch (error) {
      throw new Error(`\u8BFB\u53D6\u6587\u6863\u5931\u8D25: ${error.message}`);
    }
  }
  /**
   * 验证文档内容是否适合萃取方法论
   * @param content 文档内容
   * @returns 验证结果
   */
  validateDocumentForExtraction(content) {
    if (!content || content.trim().length === 0) {
      return { isValid: false, reason: "\u6587\u6863\u5185\u5BB9\u4E3A\u7A7A" };
    }
    const wordCount = content.replace(/\s+/g, "").length;
    if (wordCount < 200) {
      return {
        isValid: false,
        reason: `\u6587\u6863\u5185\u5BB9\u8FC7\u77ED\uFF08${wordCount}\u5B57\uFF09\uFF0C\u5EFA\u8BAE\u81F3\u5C11200\u5B57\u4EE5\u786E\u4FDD\u8403\u53D6\u8D28\u91CF`
      };
    }
    const methodologyKeywords = [
      "\u65B9\u6CD5",
      "\u6B65\u9AA4",
      "\u6D41\u7A0B",
      "\u6280\u5DE7",
      "\u7B56\u7565",
      "\u539F\u7406",
      "\u601D\u8DEF",
      "\u6846\u67B6",
      "\u6A21\u5F0F",
      "\u51C6\u5219",
      "\u89C4\u5F8B",
      "\u6CD5\u5219",
      "\u516C\u5F0F",
      "\u6A21\u578B"
    ];
    const hasMethodologyContent = methodologyKeywords.some(
      (keyword) => content.includes(keyword)
    );
    if (!hasMethodologyContent) {
      return {
        isValid: true,
        // 仍然允许萃取，但给出提示
        reason: "\u6587\u6863\u4E2D\u672A\u53D1\u73B0\u660E\u663E\u7684\u65B9\u6CD5\u8BBA\u5173\u952E\u8BCD\uFF0C\u8403\u53D6\u6548\u679C\u53EF\u80FD\u6709\u9650"
      };
    }
    return { isValid: true };
  }
  /**
   * 获取文档统计信息
   * @param content 文档内容
   * @returns 统计信息
   */
  getDocumentStats(content) {
    const wordCount = content.replace(/\s+/g, "").length;
    const charCount = content.length;
    const lineCount = content.split("\n").length;
    const estimatedReadingTime = Math.ceil(wordCount / 200);
    return {
      wordCount,
      charCount,
      lineCount,
      estimatedReadingTime
    };
  }
  /**
   * 预处理文档内容，移除不必要的格式
   * @param content 原始内容
   * @returns 处理后的内容
   */
  preprocessContent(content) {
    let processed = content;
    processed = processed.replace(/\[\[([^\]]+)\]\]/g, "$1");
    processed = processed.replace(/!\[([^\]]*)\]\([^)]+\)/g, "");
    processed = processed.replace(/\n\s*\n\s*\n/g, "\n\n");
    processed = processed.replace(/^\s+/gm, "");
    processed = processed.trim() + "\n";
    return processed;
  }
};

// src/services/AIExtractionService.ts
var AIExtractionService = class {
  constructor(config) {
    this.config = config;
  }
  /**
   * 从文档内容中萃取方法论
   * @param content 文档内容
   * @param title 文档标题
   * @returns 萃取结果
   */
  async extractMethodology(content, title) {
    try {
      this.validateConfig();
      const systemPrompt = this.getSystemPrompt();
      const userPrompt = this.getUserPrompt(content);
      const response = await this.callLLMAPI(systemPrompt, userPrompt);
      const results = this.parseResponse(response);
      return {
        success: true,
        data: results
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 验证配置是否完整
   */
  validateConfig() {
    if (!this.config.apiKey) {
      throw new Error("API\u5BC6\u94A5\u672A\u914D\u7F6E");
    }
    if (!this.config.baseUrl) {
      throw new Error("API\u57FA\u7840URL\u672A\u914D\u7F6E");
    }
    if (!this.config.modelName) {
      throw new Error("\u6A21\u578B\u540D\u79F0\u672A\u914D\u7F6E");
    }
  }
  /**
   * 获取系统提示词
   */
  getSystemPrompt() {
    return `\u63A5\u4E0B\u6765\u626E\u6F14\u4E00\u4E2A\u8BFE\u7A0B\u8BBE\u8BA1\u5E08\uFF0C\u4F60\u7684\u4EFB\u52A1\u662F\u4ECE\u6211\u63D0\u4F9B\u6587\u7AE0\u5185\u5BB9\u4E2D\u8403\u53D6\u65B9\u6CD5\u8BBA\u3002
\u4F60\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA\u5FC5\u987B\u662F\u53EF\u64CD\u4F5C\u3001\u53EF\u6267\u884C\u7684\uFF0C\u5B83\u5E94\u8BE5\u80FD\u8BA9\u5B66\u5458\u4F7F\u7528\u4F60\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA\u5F00\u5C55\u521B\u4F5C\u3002
\u4E00\u4E2A\u53C2\u8003\u7684\u683C\u5F0F\u5982\u4E0B\uFF08\u8F93\u51FA\u65F6\u4E0D\u5305\u542B\u4EE3\u7801\u5757\u6807\u8BC6\u7B26\uFF09\uFF1A

## \u4F7F\u7528\u5FC3\u7406\u8D26\u6237\u7406\u8BBA\u5199\u6587\u6848
### \u57FA\u672C\u539F\u7406
//\u603B\u7ED3\u8FD9\u4E2A\u65B9\u6CD5\u8BBA\u7684\u539F\u7406\uFF0C\u8BA9\u5B66\u5458\u900F\u5F7B\u7406\u89E3\u80CC\u666F
- \u4EBA\u4EEC\u5FC3\u91CC\u5BF9\u94B1\u7684\u4F7F\u7528\u6709\u4E0D\u540C\u7684\u6807\u51C6,\u4F1A\u5C06\u5F00\u652F\u5212\u5206\u4E3A\u4E0D\u540C\u7684\u5FC3\u7406\u8D26\u6237\u3002
- 5\u5927\u5FC3\u7406\u8D26\u6237:\u751F\u6D3B\u5FC5\u9700\u3001\u5BB6\u5EAD\u5EFA\u8BBE\u3001\u4E2A\u4EBA\u53D1\u5C55\u3001\u60C5\u611F\u7EF4\u7CFB\u3001\u4EAB\u4E50\u4F11\u95F2\u3002
- \u901A\u8FC7\u8BA9\u987E\u5BA2\u4ECE\u4E00\u4E2A\u4E0D\u613F\u610F\u82B1\u94B1\u7684\u8D26\u6237,\u8F6C\u79FB\u5230\u4E00\u4E2A\u4E50\u4E8E\u6D88\u8D39\u7684\u8D26\u6237,\u5C31\u80FD\u4FC3\u6210\u8D2D\u4E70\u3002
### \u5E94\u7528\u65B9\u6CD5
//\u65B9\u6CD5\u8BBA\u5E94\u7528\u7684\u601D\u8003\u65B9\u5F0F\u6216\u5177\u4F53\u6B65\u9AA4
- \u660E\u786E\u4E0D\u540C\u5FC3\u7406\u8D26\u6237\u7684\u9884\u7B97\u754C\u9650\uFF1A\u751F\u6D3B\u5FC5\u9700\u54C1\u7684\u9884\u7B97\u4E00\u822C\u4F4E\u4E8E\u60C5\u611F\u7C7B\u8D26\u6237\u7684\u9884\u7B97
- \u660E\u786E\u4E0D\u540C\u5FC3\u7406\u8D26\u6237\u7684\u91CD\u8981\u6027\uFF1A\u751F\u6D3B\u5FC5\u987B\u5F00\u652F\u662F\u751F\u6D3B\u7684\u57FA\u672C\u4FDD\u969C\uFF0C\u5176\u4E2D\u7684\u9884\u7B97\u65E0\u6CD5\u88AB\u8FC1\u79FB\u4E3A\u5176\u4ED6\u8D26\u6237\u3002
- \u5F15\u5BFC\u6D88\u8D39\u8005\u8F6C\u79FB\u5FC3\u7406\u8D26\u6237\uFF1A\u5728\u6587\u6848\u4E2D\u6697\u793A\u4EA7\u54C1\u5C5E\u6027,\u8F6C\u79FB\u81F3\u9884\u7B97\u66F4\u9AD8\u7684\u8D26\u6237
\u2026\u2026
### \u7EC6\u8282\u548C\u793A\u4F8B
//\u7ED9\u51FA\u4F7F\u7528\u8FD9\u4E2A\u65B9\u6CD5\u8BBA\u9700\u8981\u6CE8\u610F\u7684\u7EC6\u8282\uFF0C\u7ED9\u51FA\u4E00\u4E9B\u4ECE\u6587\u7AE0\u4E2D\u63D0\u53D6\u7684\u793A\u4F8B\uFF08\u5982\u679C\u6CA1\u6709\u793A\u4F8B\u5219\u7559\u7A7A\uFF09

**\u6CE8\u610F**
1. \u5982\u679C\u63D0\u4F9B\u7684\u6587\u7AE0\u65E0\u6CD5\u63D0\u53D6\u65B9\u6CD5\u8BBA\uFF0C\u5219\u56DE\u590D"\u4F60\u63D0\u4F9B\u7684\u6587\u7AE0\u4E0D\u5305\u542B\u53EF\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA"
2. \u5982\u679C\u6587\u7AE0\u4E2D\u5305\u542B\u591A\u5957\u65B9\u6CD5\u8BBA\uFF0C\u5219\u5206\u522B\u63D0\u53D6\u540E\u8F93\u51FA\u591A\u4E2A\u65B9\u6CD5\u8BBA\u3002
\u4EE5 JSON \u683C\u5F0F\u8F93\u51FA\uFF0C\u7ED3\u6784\u5982\u4E0B\uFF1A
[{
"title":"\u65B9\u6CD5\u8BBA\u7684\u540D\u79F0",
"description":"\u65B9\u6CD5\u8BBA\u7684\u4F7F\u7528\u573A\u666F",
"methodology":"\u63D0\u53D6\u7684\u65B9\u6CD5\u8BBA\u5185\u5BB9"
}]`;
  }
  /**
   * 构建用户提示词
   */
  getUserPrompt(content) {
    return `\u5F85\u8403\u53D6\u65B9\u6CD5\u8BBA\u7684\u6587\u7AE0\uFF1A
<content>
${content}
</content>`;
  }
  /**
   * 调用大模型API
   */
  async callLLMAPI(systemPrompt, userPrompt) {
    var _a;
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.config.apiKey}`
    };
    const requestBody = {
      model: this.config.modelName,
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2e3
    };
    try {
      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`API\u8BF7\u6C42\u5931\u8D25: ${response.status} ${response.statusText}. ${((_a = errorData.error) == null ? void 0 : _a.message) || ""}`);
      }
      const data = await response.json();
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error("API\u54CD\u5E94\u683C\u5F0F\u5F02\u5E38");
      }
      return data.choices[0].message.content;
    } catch (error) {
      if (error instanceof TypeError && error.message.includes("fetch")) {
        throw new Error("\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u548CAPI\u5730\u5740");
      }
      throw error;
    }
  }
  /**
   * 解析AI响应
   */
  parseResponse(response) {
    try {
      let cleanResponse = response.trim();
      cleanResponse = cleanResponse.replace(/^```json\s*/i, "");
      cleanResponse = cleanResponse.replace(/\s*```$/i, "");
      cleanResponse = cleanResponse.replace(/^```\s*/i, "");
      if (cleanResponse.includes("\u4E0D\u5305\u542B\u53EF\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA")) {
        throw new Error("\u6587\u6863\u5185\u5BB9\u4E0D\u5305\u542B\u53EF\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA\uFF0C\u8BF7\u5C1D\u8BD5\u5305\u542B\u66F4\u591A\u65B9\u6CD5\u8BBA\u76F8\u5173\u5185\u5BB9\u7684\u6587\u6863");
      }
      const parsed = JSON.parse(cleanResponse);
      if (!Array.isArray(parsed)) {
        throw new Error("AI\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF\uFF1A\u671F\u671B\u6570\u7EC4\u683C\u5F0F");
      }
      if (parsed.length === 0) {
        throw new Error("\u672A\u80FD\u4ECE\u6587\u6863\u4E2D\u8403\u53D6\u5230\u4EFB\u4F55\u65B9\u6CD5\u8BBA");
      }
      const results = parsed.map((item, index) => {
        if (!item.title || !item.methodology) {
          throw new Error(`\u7B2C${index + 1}\u4E2A\u65B9\u6CD5\u8BBA\u7F3A\u5C11\u5FC5\u8981\u5B57\u6BB5\uFF08title\u6216methodology\uFF09`);
        }
        return {
          title: item.title.trim(),
          description: (item.description || "").trim(),
          methodology: item.methodology.trim()
        };
      });
      return results;
    } catch (error) {
      if (error instanceof SyntaxError) {
        console.error("AI\u54CD\u5E94\u5185\u5BB9:", response);
        throw new Error("AI\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF\uFF0C\u65E0\u6CD5\u89E3\u6790\u4E3A\u6709\u6548\u7684JSON\u683C\u5F0F\u3002\u8BF7\u68C0\u67E5\u6A21\u578B\u914D\u7F6E\u6216\u91CD\u8BD5");
      }
      throw error;
    }
  }
  /**
   * 测试API连接
   */
  async testConnection() {
    var _a;
    try {
      this.validateConfig();
      const testPrompt = "\u6D4B\u8BD5\u8FDE\u63A5";
      const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.config.apiKey}`
      };
      const requestBody = {
        model: this.config.modelName,
        messages: [
          {
            role: "user",
            content: testPrompt
          }
        ],
        max_tokens: 10
      };
      const response = await fetch(`${this.config.baseUrl}/chat/completions`, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`\u8FDE\u63A5\u5931\u8D25: ${response.status} ${((_a = errorData.error) == null ? void 0 : _a.message) || response.statusText}`);
      }
      const data = await response.json();
      if (!data.choices || !data.choices[0]) {
        throw new Error("API\u54CD\u5E94\u683C\u5F0F\u5F02\u5E38");
      }
      return { success: true };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 更新配置
   */
  updateConfig(config) {
    this.config = config;
  }
  /**
   * 获取当前配置
   */
  getConfig() {
    return { ...this.config };
  }
  /**
   * 估算内容的token数量（粗略估算）
   */
  estimateTokens(content) {
    const chineseChars = (content.match(/[\u4e00-\u9fff]/g) || []).length;
    const englishWords = (content.match(/[a-zA-Z]+/g) || []).length;
    const otherChars = content.length - chineseChars;
    return Math.ceil(chineseChars * 1.5 + englishWords * 1.3 + otherChars * 0.5);
  }
  /**
   * 检查内容长度是否适合API调用
   */
  validateContentLength(content) {
    const estimatedTokens = this.estimateTokens(content);
    const maxInputTokens = 4e3;
    if (estimatedTokens > maxInputTokens) {
      return {
        isValid: false,
        reason: `\u6587\u6863\u5185\u5BB9\u8FC7\u957F\uFF08\u7EA6${estimatedTokens}\u4E2Atoken\uFF09\uFF0C\u5EFA\u8BAE\u4E0D\u8D85\u8FC7${maxInputTokens}\u4E2Atoken`
      };
    }
    return { isValid: true };
  }
};

// src/services/SaveService.ts
var import_obsidian = require("obsidian");
var SaveService = class {
  constructor(app, kbConfig) {
    this.app = app;
    this.kbConfig = kbConfig;
  }
  /**
   * 本地保存方法论到methodology文件夹
   * @param results 方法论结果
   * @param sourceTitle 源文档标题
   * @returns 保存结果
   */
  async saveToLocal(results, sourceTitle) {
    try {
      await this.ensureMethodologyFolder();
      const fileName = this.generateFileName(sourceTitle);
      const filePath = `methodology/${fileName}`;
      const content = this.generateMarkdownContent(results, sourceTitle);
      const existingFile = this.app.vault.getAbstractFileByPath(filePath);
      if (existingFile && existingFile instanceof import_obsidian.TFile) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-").slice(0, 19);
        const nameWithoutExt = fileName.replace(".md", "");
        const newFileName = `${nameWithoutExt}_${timestamp}.md`;
        const newFilePath = `methodology/${newFileName}`;
        await this.app.vault.create(newFilePath, content);
        return { success: true, filePath: newFilePath };
      } else {
        await this.app.vault.create(filePath, content);
        return { success: true, filePath };
      }
    } catch (error) {
      return {
        success: false,
        error: `\u672C\u5730\u4FDD\u5B58\u5931\u8D25: ${error.message}`
      };
    }
  }
  /**
   * 保存到Dify知识库
   * @param results 方法论结果
   * @param sourceTitle 源文档标题
   * @returns 保存结果
   */
  async saveToKnowledgeBase(results, sourceTitle) {
    try {
      this.validateKBConfig();
      const segments = this.prepareKBSegments(results, sourceTitle);
      const response = await this.callKnowledgeBaseAPI(segments);
      return {
        success: true,
        data: response
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 测试知识库连接
   * @returns 测试结果
   */
  async testKnowledgeBaseConnection() {
    try {
      this.validateKBConfig();
      const testSegments = [{
        content: "\u6D4B\u8BD5\u8FDE\u63A5 - \u7CFB\u7EDF\u6D4B\u8BD5",
        keywords: ["\u6D4B\u8BD5", "\u8FDE\u63A5"]
      }];
      await this.callKnowledgeBaseAPI(testSegments);
      return { success: true };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 确保methodology文件夹存在
   */
  async ensureMethodologyFolder() {
    const folderPath = "methodology";
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !(folder instanceof import_obsidian.TFolder)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  /**
   * 生成文件名
   */
  generateFileName(sourceTitle) {
    const cleanTitle = sourceTitle.replace(/[\\\\/:*?\"<>|]/g, "").replace(/\\s+/g, "_").substring(0, 50);
    const date = new Date().toISOString().slice(0, 10);
    return `${cleanTitle}_\u65B9\u6CD5\u8BBA_${date}.md`;
  }
  /**
   * 生成Markdown内容
   */
  generateMarkdownContent(results, sourceTitle) {
    const timestamp = new Date().toLocaleString("zh-CN");
    let content = `# ${sourceTitle} - \u65B9\u6CD5\u8BBA\u8403\u53D6

`;
    content += `> \u8403\u53D6\u65F6\u95F4: ${timestamp}
`;
    content += `> \u6765\u6E90\u6587\u6863: ${sourceTitle}
`;
    content += `> \u8403\u53D6\u7ED3\u679C: ${results.length}\u4E2A\u65B9\u6CD5\u8BBA

`;
    content += "---\n\n";
    results.forEach((result, index) => {
      content += `## ${index + 1}. ${result.title}

`;
      if (result.description) {
        content += `**\u4F7F\u7528\u573A\u666F**: ${result.description}

`;
      }
      content += `${result.methodology}

`;
      if (index < results.length - 1) {
        content += "---\n\n";
      }
    });
    content += "\n## \u4F7F\u7528\u8BF4\u660E\n\n";
    content += "- \u8FD9\u4E9B\u65B9\u6CD5\u8BBA\u662F\u901A\u8FC7AI\u4ECE\u6E90\u6587\u6863\u4E2D\u8403\u53D6\u5F97\u5230\u7684\n";
    content += "- \u53EF\u4EE5\u6839\u636E\u5B9E\u9645\u9700\u8981\u8FDB\u884C\u7F16\u8F91\u548C\u5B8C\u5584\n";
    content += "- \u5EFA\u8BAE\u5728\u4F7F\u7528\u524D\u4ED4\u7EC6\u7406\u89E3\u65B9\u6CD5\u8BBA\u7684\u539F\u7406\u548C\u9002\u7528\u573A\u666F\n";
    return content;
  }
  /**
   * 验证知识库配置
   */
  validateKBConfig() {
    if (!this.kbConfig.apiKey) {
      throw new Error("\u77E5\u8BC6\u5E93API\u5BC6\u94A5\u672A\u914D\u7F6E");
    }
    if (!this.kbConfig.postUrl) {
      throw new Error("\u77E5\u8BC6\u5E93API\u5730\u5740\u672A\u914D\u7F6E");
    }
    if (!this.kbConfig.datasetId) {
      throw new Error("\u6570\u636E\u96C6ID\u672A\u914D\u7F6E");
    }
    if (!this.kbConfig.documentId) {
      throw new Error("\u6587\u6863ID\u672A\u914D\u7F6E");
    }
  }
  /**
   * 准备知识库段落数据
   */
  prepareKBSegments(results, sourceTitle) {
    return results.map((result) => {
      const keywords = this.extractKeywords(result);
      const content = `\u3010${result.title}\u3011
${result.description ? result.description + "\n\n" : ""}${result.methodology}`;
      return {
        content,
        keywords
      };
    });
  }
  /**
   * 从方法论中提取关键词
   */
  extractKeywords(result) {
    const keywords = /* @__PURE__ */ new Set();
    const titleWords = result.title.split(/[\\s\\u4e00-\\u9fff]+/).filter((word) => word.length > 1);
    titleWords.forEach((word) => keywords.add(word));
    if (result.description) {
      const descWords = result.description.match(/[\\u4e00-\\u9fff]{2,}/g) || [];
      descWords.slice(0, 3).forEach((word) => keywords.add(word));
    }
    keywords.add("\u65B9\u6CD5\u8BBA");
    keywords.add("\u7B56\u7565");
    return Array.from(keywords).slice(0, 10);
  }
  /**
   * 调用知识库API
   */
  async callKnowledgeBaseAPI(segments) {
    const url = `${this.kbConfig.postUrl}/datasets/${this.kbConfig.datasetId}/documents/${this.kbConfig.documentId}/segments`;
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.kbConfig.apiKey}`
    };
    const requestBody = {
      segments
    };
    try {
      const response = await fetch(url, {
        method: "POST",
        headers,
        body: JSON.stringify(requestBody)
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`\u77E5\u8BC6\u5E93API\u8BF7\u6C42\u5931\u8D25: ${response.status} ${response.statusText}. ${errorData.message || ""}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      if (error instanceof TypeError && error.message.includes("fetch")) {
        throw new Error("\u7F51\u7EDC\u8FDE\u63A5\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u548CAPI\u5730\u5740");
      }
      throw error;
    }
  }
  /**
   * 更新知识库配置
   */
  updateKBConfig(config) {
    this.kbConfig = config;
  }
  /**
   * 获取当前知识库配置
   */
  getKBConfig() {
    return { ...this.kbConfig };
  }
  /**
   * 检查本地methodology文件夹状态
   */
  getLocalFolderInfo() {
    const folderPath = "methodology";
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !(folder instanceof import_obsidian.TFolder)) {
      return {
        exists: false,
        fileCount: 0,
        folderPath
      };
    }
    const fileCount = folder.children.filter((child) => child instanceof import_obsidian.TFile && child.extension === "md").length;
    return {
      exists: true,
      fileCount,
      folderPath
    };
  }
};

// src/ui/MethodologyExtractorView.ts
var VIEW_TYPE_METHODOLOGY_EXTRACTOR = "methodology-extractor-view";
var MethodologyExtractorView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.documentReader = new DocumentReader(this.app);
    this.aiService = new AIExtractionService(plugin.settings.llmConfig);
    this.saveService = new SaveService(this.app, plugin.settings.knowledgeBaseConfig);
    this.state = {
      status: "idle"
    };
  }
  getViewType() {
    return VIEW_TYPE_METHODOLOGY_EXTRACTOR;
  }
  getDisplayText() {
    return "\u65B9\u6CD5\u8BBA\u8403\u53D6\u5668";
  }
  getIcon() {
    return "zap";
  }
  async onOpen() {
    this.contentEl.empty();
    this.renderView();
  }
  async onClose() {
  }
  renderView() {
    this.contentEl.empty();
    this.contentEl.addClass("methodology-extractor-view");
    const headerEl = this.contentEl.createEl("div", { cls: "view-header" });
    headerEl.createEl("h2", { text: "\u65B9\u6CD5\u8BBA\u8403\u53D6\u5668", cls: "view-title" });
    headerEl.createEl("p", {
      text: "\u4ECE\u5F53\u524D\u6587\u6863\u4E2D\u8403\u53D6\u65B9\u6CD5\u8BBA\u5E76\u6784\u5EFA\u77E5\u8BC6\u5E93",
      cls: "view-description"
    });
    const mainEl = this.contentEl.createEl("div", { cls: "main-area" });
    this.renderStatusArea(mainEl);
    this.renderActionArea(mainEl);
    this.renderResultArea(mainEl);
    this.addStyles();
  }
  renderStatusArea(parent) {
    const statusEl = parent.createEl("div", { cls: "status-area" });
    switch (this.state.status) {
      case "idle":
        this.renderIdleStatus(statusEl);
        break;
      case "reading":
        this.renderLoadingStatus(statusEl, "\u6B63\u5728\u8BFB\u53D6\u6587\u6863...");
        break;
      case "extracting":
        this.renderLoadingStatus(statusEl, "\u6574\u7406\u8403\u53D6\u77E5\u8BC6\u4E2D...");
        break;
      case "success":
        this.renderSuccessStatus(statusEl);
        break;
      case "error":
        this.renderErrorStatus(statusEl);
        break;
    }
  }
  renderIdleStatus(parent) {
    const idleEl = parent.createEl("div", { cls: "idle-status" });
    idleEl.createEl("p", {
      text: "\u51C6\u5907\u5C31\u7EEA\uFF0C\u70B9\u51FB\u6309\u94AE\u5F00\u59CB\u8403\u53D6\u5F53\u524D\u6587\u6863\u7684\u65B9\u6CD5\u8BBA",
      cls: "status-text"
    });
  }
  renderLoadingStatus(parent, message) {
    const loadingEl = parent.createEl("div", { cls: "loading-status" });
    const spinnerEl = loadingEl.createEl("div", { cls: "loading-spinner" });
    const messageEl = loadingEl.createEl("p", {
      text: message,
      cls: "status-text loading-text"
    });
  }
  renderSuccessStatus(parent) {
    const successEl = parent.createEl("div", { cls: "success-status" });
    if (this.state.documentTitle) {
      successEl.createEl("p", {
        text: `\u5DF2\u8BFB\u53D6\u6587\u6863\uFF0C\u6807\u9898\u4E3A\u300A${this.state.documentTitle}\u300B`,
        cls: "status-text success-text"
      });
    }
    successEl.createEl("p", {
      text: "\u2705 \u8403\u53D6\u5B8C\u6210\uFF01\u8BF7\u67E5\u770B\u4E0B\u65B9\u7ED3\u679C",
      cls: "status-text success-text"
    });
  }
  renderErrorStatus(parent) {
    const errorEl = parent.createEl("div", { cls: "error-status" });
    errorEl.createEl("p", {
      text: `\u274C ${this.state.error || "\u53D1\u751F\u672A\u77E5\u9519\u8BEF"}`,
      cls: "status-text error-text"
    });
  }
  renderActionArea(parent) {
    const actionEl = parent.createEl("div", { cls: "action-area" });
    const extractBtn = actionEl.createEl("button", {
      text: "\u{1F680} \u5F00\u59CB\u8403\u53D6\u65B9\u6CD5\u8BBA",
      cls: "mod-cta extract-btn"
    });
    if (this.state.status === "reading" || this.state.status === "extracting") {
      extractBtn.disabled = true;
      extractBtn.addClass("is-loading");
    }
    extractBtn.addEventListener("click", () => {
      this.handleExtractClick();
    });
    if (!this.isConfigurationValid()) {
      const configWarning = actionEl.createEl("div", { cls: "config-warning" });
      configWarning.createEl("p", {
        text: "\u26A0\uFE0F \u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u5927\u6A21\u578B\u548C\u77E5\u8BC6\u5E93\u4FE1\u606F",
        cls: "warning-text"
      });
      const configBtn = configWarning.createEl("button", {
        text: "\u6253\u5F00\u8BBE\u7F6E",
        cls: "mod-cta config-btn"
      });
      configBtn.addEventListener("click", () => {
        this.app.setting.open();
        this.app.setting.openTabById(this.plugin.manifest.id);
      });
      extractBtn.disabled = true;
    }
  }
  renderResultArea(parent) {
    if (!this.state.results || this.state.results.length === 0) {
      return;
    }
    const resultEl = parent.createEl("div", { cls: "result-area" });
    resultEl.createEl("h3", { text: "\u8403\u53D6\u7ED3\u679C", cls: "result-title" });
    this.state.results.forEach((result, index) => {
      this.renderMethodologyResult(resultEl, result, index);
    });
    this.renderSaveButtons(resultEl);
  }
  renderMethodologyResult(parent, result, index) {
    const resultItemEl = parent.createEl("div", { cls: "result-item" });
    resultItemEl.createEl("h4", { text: result.title, cls: "methodology-title" });
    if (result.description) {
      resultItemEl.createEl("p", { text: result.description, cls: "methodology-description" });
    }
    const contentEl = resultItemEl.createEl("div", { cls: "methodology-content" });
    const readOnlyEl = contentEl.createEl("div", { cls: "methodology-readonly" });
    readOnlyEl.innerHTML = this.formatMethodologyContent(result.methodology);
    const editEl = contentEl.createEl("div", { cls: "methodology-edit-container hidden" });
    const textarea = editEl.createEl("textarea", {
      value: result.methodology,
      cls: "methodology-textarea"
    });
    const editBtn = contentEl.createEl("button", {
      text: "\u270F\uFE0F \u7F16\u8F91\u5185\u5BB9",
      cls: "edit-toggle-btn"
    });
    const editControlsEl = editEl.createEl("div", { cls: "edit-controls" });
    const saveBtn = editControlsEl.createEl("button", {
      text: "\u{1F4BE} \u4FDD\u5B58",
      cls: "save-edit-btn mod-cta"
    });
    const cancelBtn = editControlsEl.createEl("button", {
      text: "\u274C \u53D6\u6D88",
      cls: "cancel-edit-btn"
    });
    editBtn.addEventListener("click", () => {
      readOnlyEl.addClass("hidden");
      editBtn.addClass("hidden");
      editEl.removeClass("hidden");
      this.adjustTextareaHeight(textarea);
      textarea.focus();
    });
    saveBtn.addEventListener("click", () => {
      if (this.state.results) {
        const newContent = textarea.value;
        this.state.results[index].methodology = newContent;
        readOnlyEl.innerHTML = this.formatMethodologyContent(newContent);
        this.switchToReadOnlyMode(readOnlyEl, editBtn, editEl);
      }
    });
    cancelBtn.addEventListener("click", () => {
      textarea.value = result.methodology;
      this.switchToReadOnlyMode(readOnlyEl, editBtn, editEl);
    });
    textarea.addEventListener("input", () => this.adjustTextareaHeight(textarea));
  }
  renderSaveButtons(parent) {
    const saveEl = parent.createEl("div", { cls: "save-area" });
    const localSaveBtn = saveEl.createEl("button", {
      text: "\u{1F4BE} \u672C\u5730\u4FDD\u5B58",
      cls: "mod-cta save-btn local-save"
    });
    const cloudSaveBtn = saveEl.createEl("button", {
      text: "\u2601\uFE0F \u4E91\u7AEF\u4FDD\u5B58",
      cls: "mod-cta save-btn cloud-save"
    });
    localSaveBtn.addEventListener("click", () => {
      this.handleLocalSave();
    });
    cloudSaveBtn.addEventListener("click", () => {
      this.handleCloudSave();
    });
  }
  async handleExtractClick() {
    try {
      this.updateState({ status: "reading" });
      this.renderView();
      const documentInfo = await this.documentReader.getCurrentDocument();
      if (!documentInfo) {
        throw new Error("\u672A\u627E\u5230\u6D3B\u52A8\u6587\u6863");
      }
      const validation = this.documentReader.validateDocumentForExtraction(documentInfo.content);
      if (!validation.isValid) {
        throw new Error(validation.reason);
      }
      this.updateState({
        status: "extracting",
        documentTitle: documentInfo.title
      });
      this.renderView();
      const processedContent = this.documentReader.preprocessContent(documentInfo.content);
      const lengthValidation = this.aiService.validateContentLength(processedContent);
      if (!lengthValidation.isValid) {
        throw new Error(lengthValidation.reason);
      }
      this.aiService.updateConfig(this.plugin.settings.llmConfig);
      this.saveService.updateKBConfig(this.plugin.settings.knowledgeBaseConfig);
      const aiResponse = await this.aiService.extractMethodology(processedContent, documentInfo.title);
      if (!aiResponse.success) {
        throw new Error(aiResponse.error || "\u8403\u53D6\u5931\u8D25");
      }
      if (!aiResponse.data || aiResponse.data.length === 0) {
        throw new Error("\u672A\u80FD\u8403\u53D6\u5230\u4EFB\u4F55\u65B9\u6CD5\u8BBA\uFF0C\u8BF7\u68C0\u67E5\u6587\u6863\u5185\u5BB9\u662F\u5426\u5305\u542B\u6E05\u6670\u7684\u65B9\u6CD5\u8BBA\u63CF\u8FF0");
      }
      this.updateState({
        status: "success",
        results: aiResponse.data
      });
      this.renderView();
    } catch (error) {
      console.error("\u8403\u53D6\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF:", error);
      this.updateState({
        status: "error",
        error: error.message
      });
      this.renderView();
    }
  }
  async handleLocalSave() {
    if (!this.state.results || this.state.results.length === 0) {
      new import_obsidian2.Notice("\u6CA1\u6709\u53EF\u4FDD\u5B58\u7684\u5185\u5BB9");
      return;
    }
    try {
      const saveResult = await this.saveService.saveToLocal(
        this.state.results,
        this.state.documentTitle || "\u672A\u77E5\u6587\u6863"
      );
      if (saveResult.success) {
        new import_obsidian2.Notice(`\u2705 \u672C\u5730\u4FDD\u5B58\u6210\u529F: ${saveResult.filePath}`);
        if (saveResult.filePath) {
          const file = this.app.vault.getAbstractFileByPath(saveResult.filePath);
          if (file) {
            this.app.workspace.openLinkText(saveResult.filePath, "", false);
          }
        }
      } else {
        new import_obsidian2.Notice(`\u274C ${saveResult.error}`);
      }
    } catch (error) {
      new import_obsidian2.Notice(`\u274C \u672C\u5730\u4FDD\u5B58\u5931\u8D25: ${error.message}`);
    }
  }
  async handleCloudSave() {
    if (!this.state.results || this.state.results.length === 0) {
      new import_obsidian2.Notice("\u6CA1\u6709\u53EF\u4FDD\u5B58\u7684\u5185\u5BB9");
      return;
    }
    const { knowledgeBaseConfig } = this.plugin.settings;
    if (!knowledgeBaseConfig.apiKey || !knowledgeBaseConfig.datasetId || !knowledgeBaseConfig.documentId || !knowledgeBaseConfig.postUrl) {
      new import_obsidian2.Notice("\u26A0\uFE0F \u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u5B8C\u6574\u914D\u7F6E\u77E5\u8BC6\u5E93\u4FE1\u606F");
      return;
    }
    try {
      new import_obsidian2.Notice("\u6B63\u5728\u4FDD\u5B58\u5230\u77E5\u8BC6\u5E93...");
      const saveResult = await this.saveService.saveToKnowledgeBase(
        this.state.results,
        this.state.documentTitle || "\u672A\u77E5\u6587\u6863"
      );
      if (saveResult.success) {
        new import_obsidian2.Notice("\u2705 \u4E91\u7AEF\u4FDD\u5B58\u6210\u529F\uFF01\u65B9\u6CD5\u8BBA\u5DF2\u6DFB\u52A0\u5230\u77E5\u8BC6\u5E93");
      } else {
        new import_obsidian2.Notice(`\u274C ${saveResult.error}`);
      }
    } catch (error) {
      new import_obsidian2.Notice(`\u274C \u4E91\u7AEF\u4FDD\u5B58\u5931\u8D25: ${error.message}`);
    }
  }
  updateState(newState) {
    this.state = { ...this.state, ...newState };
  }
  isConfigurationValid() {
    const { llmConfig, knowledgeBaseConfig } = this.plugin.settings;
    const llmValid = llmConfig.apiKey && llmConfig.baseUrl && llmConfig.modelName;
    const kbValid = knowledgeBaseConfig.apiKey && knowledgeBaseConfig.datasetId && knowledgeBaseConfig.documentId && knowledgeBaseConfig.postUrl;
    return !!(llmValid && kbValid);
  }
  adjustTextareaHeight(textarea) {
    textarea.style.height = "auto";
    textarea.style.height = Math.max(100, textarea.scrollHeight) + "px";
  }
  formatMethodologyContent(content) {
    return content.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br>").replace(/\s{2,}/g, (match) => "&nbsp;".repeat(match.length));
  }
  switchToReadOnlyMode(readOnlyEl, editBtn, editEl) {
    editEl.addClass("hidden");
    readOnlyEl.removeClass("hidden");
    editBtn.removeClass("hidden");
  }
  addStyles() {
    const styleEl = document.createElement("style");
    styleEl.textContent = `
      .methodology-extractor-view {
        padding: 16px;
      }
      
      .view-header {
        margin-bottom: 20px;
        border-bottom: 1px solid var(--background-modifier-border);
        padding-bottom: 10px;
      }
      
      .view-title {
        margin: 0 0 8px 0;
        color: var(--text-accent);
      }
      
      .view-description {
        margin: 0;
        color: var(--text-muted);
        font-size: 0.9em;
      }
      
      .main-area {
        display: flex;
        flex-direction: column;
        gap: 16px;
      }
      
      .status-area {
        padding: 12px;
        border-radius: 8px;
        border: 1px solid var(--background-modifier-border);
      }
      
      .loading-status {
        display: flex;
        align-items: center;
        gap: 12px;
      }
      
      .loading-spinner {
        width: 16px;
        height: 16px;
        border: 2px solid var(--background-modifier-border);
        border-top: 2px solid var(--text-accent);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .success-status {
        background-color: var(--background-modifier-success);
      }
      
      .error-status {
        background-color: var(--background-modifier-error);
      }
      
      .config-warning {
        margin-top: 12px;
        padding: 12px;
        border-radius: 6px;
        background-color: var(--background-modifier-error);
      }
      
      .warning-text {
        margin: 0 0 8px 0;
        color: var(--text-on-accent);
      }
      
      .config-btn {
        font-size: 0.9em;
      }
      
      .extract-btn {
        padding: 12px 24px;
        font-size: 1.1em;
        width: 100%;
      }
      
      .extract-btn.is-loading {
        opacity: 0.7;
      }
      
      .result-area {
        margin-top: 20px;
      }
      
      .result-title {
        margin: 0 0 16px 0;
        font-weight: bold;
      }
      
      .result-item {
        margin-bottom: 20px;
        padding: 16px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 8px;
      }
      
      .methodology-title {
        margin: 0 0 8px 0;
        color: var(--text-accent);
      }
      
      .methodology-description {
        margin: 0 0 12px 0;
        color: var(--text-muted);
        font-style: italic;
      }
      
      .methodology-content {
        position: relative;
      }
      
      .methodology-readonly {
        padding: 12px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 6px;
        background-color: var(--background-secondary);
        color: var(--text-normal);
        font-family: var(--font-text);
        font-size: 0.9em;
        line-height: 1.6;
        min-height: 60px;
        white-space: pre-wrap;
        word-wrap: break-word;
        margin-bottom: 8px;
      }
      
      .methodology-edit-container {
        margin-bottom: 8px;
      }
      
      .methodology-textarea {
        width: 100%;
        min-height: 100px;
        padding: 12px;
        border: 1px solid var(--background-modifier-border);
        border-radius: 6px;
        background-color: var(--background-primary);
        color: var(--text-normal);
        font-family: var(--font-monospace);
        font-size: 0.9em;
        line-height: 1.5;
        resize: vertical;
        margin-bottom: 8px;
      }
      
      .edit-toggle-btn {
        padding: 6px 12px;
        font-size: 0.85em;
        background-color: var(--interactive-normal);
        border: 1px solid var(--background-modifier-border);
        border-radius: 4px;
        cursor: pointer;
        color: var(--text-normal);
      }
      
      .edit-toggle-btn:hover {
        background-color: var(--interactive-hover);
      }
      
      .edit-controls {
        display: flex;
        gap: 8px;
        justify-content: flex-end;
      }
      
      .save-edit-btn, .cancel-edit-btn {
        padding: 6px 12px;
        font-size: 0.85em;
        border-radius: 4px;
        cursor: pointer;
      }
      
      .save-edit-btn {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
        border: none;
      }
      
      .cancel-edit-btn {
        background-color: var(--interactive-normal);
        color: var(--text-normal);
        border: 1px solid var(--background-modifier-border);
      }
      
      .save-edit-btn:hover {
        background-color: var(--interactive-accent-hover);
      }
      
      .cancel-edit-btn:hover {
        background-color: var(--interactive-hover);
      }
      
      .hidden {
        display: none !important;
      }
      
      .save-area {
        display: flex;
        gap: 12px;
        margin-top: 16px;
      }
      
      .save-btn {
        flex: 1;
        padding: 10px;
      }
      
      .local-save {
        background-color: var(--interactive-accent);
      }
      
      .cloud-save {
        background-color: var(--text-accent);
      }
    `;
    if (!document.head.querySelector("#methodology-extractor-styles")) {
      styleEl.id = "methodology-extractor-styles";
      document.head.appendChild(styleEl);
    }
  }
};

// src/ui/SettingsTab.ts
var import_obsidian3 = require("obsidian");
var SettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "\u65B9\u6CD5\u8BBA\u8403\u53D6\u5668\u8BBE\u7F6E" });
    this.renderLLMSettings(containerEl);
    this.renderKnowledgeBaseSettings(containerEl);
    this.renderUsageInstructions(containerEl);
  }
  renderLLMSettings(containerEl) {
    const llmSection = containerEl.createEl("div", { cls: "setting-section" });
    llmSection.createEl("h2", { text: "\u{1F916} \u5927\u6A21\u578B\u914D\u7F6E" });
    llmSection.createEl("p", {
      text: "\u914D\u7F6E\u7528\u4E8E\u8403\u53D6\u65B9\u6CD5\u8BBA\u7684AI\u6A21\u578B\u670D\u52A1",
      cls: "setting-description"
    });
    new import_obsidian3.Setting(llmSection).setName("\u6A21\u578B\u540D\u79F0 (Model Name)").setDesc("AI\u6A21\u578B\u7684\u540D\u79F0\uFF0C\u5982: gpt-3.5-turbo, kimi-k2-turbo-preview").addText((text) => text.setPlaceholder("\u4F8B: gpt-3.5-turbo").setValue(this.plugin.settings.llmConfig.modelName).onChange(async (value) => {
      this.plugin.settings.llmConfig.modelName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(llmSection).setName("API\u57FA\u7840URL (Base URL)").setDesc("AI\u670D\u52A1\u7684API\u7AEF\u70B9\u5730\u5740").addText((text) => text.setPlaceholder("\u4F8B: https://api.openai.com/v1").setValue(this.plugin.settings.llmConfig.baseUrl).onChange(async (value) => {
      this.plugin.settings.llmConfig.baseUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(llmSection).setName("API\u5BC6\u94A5 (API Key)").setDesc("\u8BBF\u95EEAI\u670D\u52A1\u7684\u8BA4\u8BC1\u5BC6\u94A5").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.llmConfig.apiKey).onChange(async (value) => {
      this.plugin.settings.llmConfig.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(llmSection).setName("\u8FDE\u63A5\u6D4B\u8BD5").setDesc("\u6D4B\u8BD5\u5927\u6A21\u578BAPI\u8FDE\u63A5\u662F\u5426\u6B63\u5E38").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").setCta().onClick(async () => {
      await this.testLLMConnection(button.buttonEl);
    }));
  }
  renderKnowledgeBaseSettings(containerEl) {
    const kbSection = containerEl.createEl("div", { cls: "setting-section" });
    kbSection.createEl("h2", { text: "\u{1F4DA} \u77E5\u8BC6\u5E93\u914D\u7F6E" });
    const descEl = kbSection.createEl("div", { cls: "setting-description" });
    descEl.createEl("p", { text: "\u914D\u7F6EDify\u77E5\u8BC6\u5E93\u670D\u52A1\uFF0C\u7528\u4E8E\u5B58\u50A8\u8403\u53D6\u7684\u65B9\u6CD5\u8BBA" });
    const tipsEl = descEl.createEl("div", { cls: "kb-tips" });
    tipsEl.createEl("div", {
      text: "\u{1F4A1} \u63D0\u793A\uFF1A",
      cls: "tip-title"
    });
    tipsEl.createEl("p", {
      text: "\u2022 \u4F9D\u8D56Dify\u7684\u77E5\u8BC6\u5E93\uFF0C\u8BF7\u5728Dify\u521B\u5EFA\u4E00\u4E2A\u7A7A\u77E5\u8BC6\u5E93"
    });
    tipsEl.createEl("p", {
      text: "\u2022 \u786E\u4FDD\u4E0E\u4F60Chrome\u6269\u5C55\u4E2D\u914D\u7F6E\u7684\u77E5\u8BC6\u5E93\u4E00\u81F4"
    });
    new import_obsidian3.Setting(kbSection).setName("API\u7AEF\u70B9 (Post URL)").setDesc("Dify\u77E5\u8BC6\u5E93\u7684API\u5730\u5740").addText((text) => text.setPlaceholder("\u4F8B: http://dify.dulicode.com/v1").setValue(this.plugin.settings.knowledgeBaseConfig.postUrl).onChange(async (value) => {
      this.plugin.settings.knowledgeBaseConfig.postUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(kbSection).setName("\u6570\u636E\u96C6ID (Dataset ID)").setDesc("\u77E5\u8BC6\u5E93\u7684\u6570\u636E\u96C6\u6807\u8BC6\u7B26").addText((text) => text.setPlaceholder("\u4F8B: 83568849-001c-4f34-88bb-08caf02ef22e").setValue(this.plugin.settings.knowledgeBaseConfig.datasetId).onChange(async (value) => {
      this.plugin.settings.knowledgeBaseConfig.datasetId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(kbSection).setName("\u6587\u6863ID (Document ID)").setDesc("\u77E5\u8BC6\u5E93\u4E2D\u7684\u6587\u6863\u6807\u8BC6\u7B26").addText((text) => text.setPlaceholder("\u4F8B: f74fe271-a194-4446-960d-573231f7c915").setValue(this.plugin.settings.knowledgeBaseConfig.documentId).onChange(async (value) => {
      this.plugin.settings.knowledgeBaseConfig.documentId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(kbSection).setName("API\u5BC6\u94A5 (API Key)").setDesc("\u8BBF\u95EE\u77E5\u8BC6\u5E93\u7684\u8BA4\u8BC1\u5BC6\u94A5").addText((text) => text.setPlaceholder("dataset-...").setValue(this.plugin.settings.knowledgeBaseConfig.apiKey).onChange(async (value) => {
      this.plugin.settings.knowledgeBaseConfig.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(kbSection).setName("\u8FDE\u63A5\u6D4B\u8BD5").setDesc("\u6D4B\u8BD5\u77E5\u8BC6\u5E93API\u8FDE\u63A5\u662F\u5426\u6B63\u5E38").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").setCta().onClick(async () => {
      await this.testKnowledgeBaseConnection(button.buttonEl);
    }));
  }
  renderUsageInstructions(containerEl) {
    const instructionSection = containerEl.createEl("div", { cls: "setting-section" });
    instructionSection.createEl("h2", { text: "\u{1F4D6} \u4F7F\u7528\u8BF4\u660E" });
    const instructionEl = instructionSection.createEl("div", { cls: "usage-instructions" });
    instructionEl.createEl("h3", { text: "\u57FA\u672C\u4F7F\u7528\u6D41\u7A0B\uFF1A" });
    const stepsList = instructionEl.createEl("ol", { cls: "usage-steps" });
    stepsList.createEl("li", { text: "\u6253\u5F00\u5305\u542B\u65B9\u6CD5\u8BBA\u5185\u5BB9\u7684Markdown\u6587\u6863" });
    stepsList.createEl("li", { text: "\u70B9\u51FB\u4FA7\u8FB9\u680F\u7684\u26A1\u56FE\u6807\u6216\u4F7F\u7528\u547D\u4EE4\u9762\u677F\u6253\u5F00\u8403\u53D6\u5668" });
    stepsList.createEl("li", { text: '\u70B9\u51FB"\u5F00\u59CB\u8403\u53D6\u65B9\u6CD5\u8BBA"\u6309\u94AE' });
    stepsList.createEl("li", { text: "\u7B49\u5F85AI\u5206\u6790\u5E76\u8403\u53D6\u65B9\u6CD5\u8BBA" });
    stepsList.createEl("li", { text: "\u7F16\u8F91\u548C\u5B8C\u5584\u8403\u53D6\u7ED3\u679C" });
    stepsList.createEl("li", { text: "\u9009\u62E9\u672C\u5730\u4FDD\u5B58\u6216\u4E91\u7AEF\u4FDD\u5B58\u5230\u77E5\u8BC6\u5E93" });
    instructionEl.createEl("h3", { text: "\u6CE8\u610F\u4E8B\u9879\uFF1A" });
    const notesList = instructionEl.createEl("ul", { cls: "usage-notes" });
    notesList.createEl("li", { text: "\u786E\u4FDD\u6587\u6863\u5185\u5BB9\u5305\u542B\u6E05\u6670\u7684\u65B9\u6CD5\u8BBA\u6216\u6D41\u7A0B\u63CF\u8FF0" });
    notesList.createEl("li", { text: "\u5EFA\u8BAE\u6587\u6863\u5B57\u6570\u4E0D\u5C11\u4E8E200\u5B57\u4EE5\u83B7\u5F97\u66F4\u597D\u7684\u8403\u53D6\u6548\u679C" });
    notesList.createEl("li", { text: "\u8403\u53D6\u7ED3\u679C\u53EF\u4EE5\u624B\u52A8\u7F16\u8F91\u548C\u5B8C\u5584" });
    notesList.createEl("li", { text: "\u4E91\u7AEF\u4FDD\u5B58\u9700\u8981\u6B63\u786E\u914D\u7F6E\u77E5\u8BC6\u5E93\u4FE1\u606F" });
    instructionEl.createEl("h3", { text: "\u6545\u969C\u6392\u9664\uFF1A" });
    const troubleList = instructionEl.createEl("ul", { cls: "troubleshooting" });
    troubleList.createEl("li", { text: "\u5982\u679C\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5API\u5730\u5740\u548C\u5BC6\u94A5\u662F\u5426\u6B63\u786E" });
    troubleList.createEl("li", { text: "\u5982\u679C\u8403\u53D6\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u6587\u6863\u5185\u5BB9\u662F\u5426\u5305\u542B\u65B9\u6CD5\u8BBA" });
    troubleList.createEl("li", { text: "\u5982\u679C\u4FDD\u5B58\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u77E5\u8BC6\u5E93\u914D\u7F6E\u662F\u5426\u5B8C\u6574" });
  }
  async testLLMConnection(buttonEl) {
    var _a;
    const originalText = buttonEl.textContent;
    buttonEl.textContent = "\u6D4B\u8BD5\u4E2D...";
    buttonEl.disabled = true;
    try {
      const aiService = new AIExtractionService(this.plugin.settings.llmConfig);
      const testResult = await aiService.testConnection();
      if (!testResult.success) {
        throw new Error(testResult.error || "\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25");
      }
      buttonEl.textContent = "\u2705 \u8FDE\u63A5\u6210\u529F";
      buttonEl.style.backgroundColor = "var(--interactive-success)";
      setTimeout(() => {
        buttonEl.textContent = originalText;
        buttonEl.style.backgroundColor = "";
        buttonEl.disabled = false;
      }, 3e3);
    } catch (error) {
      buttonEl.textContent = "\u274C \u8FDE\u63A5\u5931\u8D25";
      buttonEl.style.backgroundColor = "var(--interactive-error)";
      const errorMsg = (_a = buttonEl.parentElement) == null ? void 0 : _a.createEl("div", {
        text: `\u9519\u8BEF: ${error.message}`,
        cls: "setting-error"
      });
      setTimeout(() => {
        buttonEl.textContent = originalText;
        buttonEl.style.backgroundColor = "";
        buttonEl.disabled = false;
        errorMsg == null ? void 0 : errorMsg.remove();
      }, 5e3);
    }
  }
  async testKnowledgeBaseConnection(buttonEl) {
    var _a;
    const originalText = buttonEl.textContent;
    buttonEl.textContent = "\u6D4B\u8BD5\u4E2D...";
    buttonEl.disabled = true;
    try {
      const saveService = new SaveService(this.app, this.plugin.settings.knowledgeBaseConfig);
      const testResult = await saveService.testKnowledgeBaseConnection();
      if (!testResult.success) {
        throw new Error(testResult.error || "\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25");
      }
      buttonEl.textContent = "\u2705 \u8FDE\u63A5\u6210\u529F";
      buttonEl.style.backgroundColor = "var(--interactive-success)";
      setTimeout(() => {
        buttonEl.textContent = originalText;
        buttonEl.style.backgroundColor = "";
        buttonEl.disabled = false;
      }, 3e3);
    } catch (error) {
      buttonEl.textContent = "\u274C \u8FDE\u63A5\u5931\u8D25";
      buttonEl.style.backgroundColor = "var(--interactive-error)";
      const errorMsg = (_a = buttonEl.parentElement) == null ? void 0 : _a.createEl("div", {
        text: `\u9519\u8BEF: ${error.message}`,
        cls: "setting-error"
      });
      setTimeout(() => {
        buttonEl.textContent = originalText;
        buttonEl.style.backgroundColor = "";
        buttonEl.disabled = false;
        errorMsg == null ? void 0 : errorMsg.remove();
      }, 5e3);
    }
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  llmConfig: {
    modelName: "",
    baseUrl: "",
    apiKey: ""
  },
  knowledgeBaseConfig: {
    postUrl: "",
    datasetId: "",
    documentId: "",
    apiKey: ""
  }
};
var MethodologyExtractorPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_METHODOLOGY_EXTRACTOR,
      (leaf) => new MethodologyExtractorView(leaf, this)
    );
    this.addRibbonIcon("zap", "\u65B9\u6CD5\u8BBA\u8403\u53D6\u5668", () => {
      this.activateView();
    });
    this.addCommand({
      id: "open-methodology-extractor",
      name: "\u6253\u5F00\u65B9\u6CD5\u8BBA\u8403\u53D6\u5668",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_METHODOLOGY_EXTRACTOR);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_METHODOLOGY_EXTRACTOR);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_METHODOLOGY_EXTRACTOR, active: true });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
